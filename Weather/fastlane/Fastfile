# update_fastlane

default_platform(:ios)

repoName = "ilyabochkov1331801/Weather-SwiftUI-Combine"
apiToken = "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"
project = "Weather.xcodeproj"
release_scheme = "Weather"
release_tag = ""

ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = "yfmb-bbjz-nzcl-gilg"

platform :ios do
  desc "Run tests"
  lane :run_all_tests do
    scan
  end

  ######################### DEV BRANCH ACTIONS #########################

  desc "Release preparation on dev branch
  Params: 
  1. bump_type - The type of this version bump. Available: patch, minor, major (ex. bump_type:patch) (optional)
  2. version - Specific app version (ex. version:1.0.3) (optional)"
  lane :prepare_dev do |options|
    check_dev_branch
    update_version(
      bump_type: options[:bump_type],
      version: options[:version]
    )
    push_to_git_remote
  end

  desc "Check if dev is current git branch"
  private_lane :check_dev_branch do
    if git_branch != "develop"
      UI.user_error! "Error: Please checkout dev branch"
    end
  end

  desc "Update and commit build and version numbers"
  private_lane :update_version do |options|
    if options[:bump_type] 
      increment_version_number(
        bump_type: options[:bump_type]
      ) 
      increment_build_number(build_number: "1")
    elsif options[:version]
      increment_version_number(
        version_number: options[:version]
      )
      increment_build_number(build_number: "1")
    else
      increment_build_number
    end
    commit_version_bump
  end

  ######################### MAIN BRANCH ACTIONS #########################

  desc "Release actions on master branch"
  lane :prepare_master do
    check_master_branch
    add_tag
    release_tag
  end

  desc "Check if master is current git branch"
  private_lane :check_master_branch do
    if git_branch != "master"
      UI.user_error! "Error: Please checkout master branch"
    end
  end

  desc "Add git tag"
  private_lane :add_tag do
    tagMessage = prompt(
      text: "Tag message: "
    )
    version = get_version_number(xcodeproj: project)
    add_git_tag(
      tag: "v" + version,
      message: tagMessage
    )
    release_tag = "v" + version
    push_git_tags
  end

  desc "Make release tag"
  private_lane :release_tag do
    releaseDescription = prompt(
      text: "Release tag description: ",
      multi_line_end_keyword: "END"
    )
    set_github_release(
      repository_name: repoName,
      api_token: apiToken,
      name: release_tag,
      tag_name: release_tag,
      description: releaseDescription
    )
  end

######################### DEPLOYMENT #########################

  desc "Submit a new App Store Build to TestFlight"
  lane :submit_prod_build do
    prepare_master
    match(
      type: "appstore",
      readonly: true
      )
    cocoapods
    gym(
      scheme: release_scheme,
      clean: true
    )
    pilot
  end

end